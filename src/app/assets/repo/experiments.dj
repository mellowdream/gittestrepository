








MAKE ICONS FOR ELECTRON BUILDS
https://iconverticons.com/online/
https://makeappicon.com/

Use https://www.electron.build/

Build using
TRAVIS OR
https://ci.appveyor.com/projects









/* PS: Spent two days on http://stackoverflow.com/questions/3015319/settimeout-cleartimeout-problems; 8-10 Aug 2016 */







    let notiFire = new Notification('Hello!', {
        body: "I'd love to hear from you. Requests, kudos, bugs, rants et al."
    });
    notiFire.onclick = function () {
        console.log('Notification clicked :o oooooo!');
    };



if (typeof String.prototype.trim != 'function') {
    String.prototype.trim = function () {
        return this.replace(/^\s+/, '').replace(/\s+$/, '');
    };
}




/* =================================================== */
// GLOBAL SHORTCUTS & CAPTURE
/* =================================================== * /

// https://stackblitz.com/edit/image-cropper ANGULAR CROPEPR !!

/**
 * Create a screenshot of the entire screen using the desktopCapturer module of Electron.
 *
 * @param callback {Function} callback receives as first parameter the base64 string of the image
 * @param imageFormat {String} Format of the image to generate ('image/jpeg' or 'image/png')
 ** /
const { desktopCapturer } = require('electron');

function fullscreenScreenshot(callback, imageFormat) {
    var _this = this;
    this.callback = callback;
    imageFormat = imageFormat || 'image/jpeg';

    this.handleStream = (stream) => {
        // Create hidden video tag
        var video = document.createElement('video');
        video.style.cssText = 'position:absolute;top:-10000px;left:-10000px;';



        // Event connected to stream
        video.onloadedmetadata = function () {
            // Set video ORIGINAL height (screenshot)
            video.style.height = this.videoHeight + 'px'; // videoHeight
            video.style.width = this.videoWidth + 'px'; // videoWidth

            video.play();

            // Create canvas
            var canvas = document.createElement('canvas');
            canvas.width = this.videoWidth;
            canvas.height = this.videoHeight;
            var ctx = canvas.getContext('2d');
            // Draw video on canvas
            ctx.drawImage(video, 0, 0, canvas.width, canvas.height);

            if (_this.callback) {
                // Save screenshot to base64
                _this.callback(canvas.toDataURL(imageFormat));
            } else {
                console.log('Need callback!');
            }

            // Remove hidden video tag
            video.remove();
            try {
                // Destroy connect to stream
                stream.getTracks()[0].stop();
            } catch (e) {}
        }
        video.srcObject = stream;
        document.body.appendChild(video);
    };

    this.handleError = function(e) {
        console.log(e);
    };

    desktopCapturer.getSources({ types: ['window', 'screen'], thumbnailSize: { width: 1366, height: 768 } }).then(async sources => {
        console.log(sources);

        for(let i=0;i<sources.length;i++) {
            $("#my-previews").append("<img src='"+sources[i].thumbnail.toDataURL()+"' class='img-thumb'/>")
        }

        document.getElementById("my-preview").setAttribute("src", sources[1].thumbnail.toDataURL());

        for (const source of sources) {
            // Filter: main screen
            if ((source.name === "Entire screen") || (source.name === "Screen 1") || (source.name === "Screen 2")) {
                try{
                    const stream = await navigator.mediaDevices.getUserMedia({
                        audio: false,
                        video: {
                            mandatory: {
                                chromeMediaSource: 'desktop',
                                chromeMediaSourceId: source.id,
                                minWidth: 1280,
                                maxWidth: 4000,
                                minHeight: 720,
                                maxHeight: 4000
                            }
                        }
                    });
                    _this.handleStream(stream);
                } catch (e) {
                    _this.handleError(e);
                }
            }
        }
    });
}
// Here the fullscreenScreenshot function


document.getElementById("trigger").addEventListener("click", function() {
    fullscreenScreenshot(function(base64data){
        // Draw image in the img tag
        document.getElementById("my-preview").setAttribute("src", base64data);
    },'image/png');
},false);

// In the renderer process.

desktopCapturer.getSources({ types: ['window', 'screen'] }).then(async sources => {
    for (const source of sources) {
        if (source.name === 'Electron') {
            try {
                const stream = await navigator.mediaDevices.getUserMedia({
                    audio: false,
                    video: {
                        mandatory: {
                            chromeMediaSource: 'desktop',
                            chromeMediaSourceId: source.id,
                            minWidth: 1280,
                            maxWidth: 1280,
                            minHeight: 720,
                            maxHeight: 720
                        }
                    }
                })
                handleStream(stream)
            } catch (e) {
                handleError(e)
            }
            return
        }
    }
})

function handleStream (stream) {
    const video = document.querySelector('video')
    video.srcObject = stream
    video.onloadedmetadata = (e) => video.play()
}

function handleError (e) {
    console.log(e)
}

/* */






// ================================== NEW LOGIC
// ==== YET TO REWRITE


/* * /
let taskRunnerDaemon = null;
let taskRunnerCreate = () => { taskRunnerDaemon = setInterval(() => countDown(),1000); }
let taskRunnerToggle = () => { taskRunnerDaemon ? taskRunnerDestroy() : taskRunnerCreate(); }
let taskRunnerDestroy = () => { clearInterval(taskRunnerDaemon); taskRunnerDaemon = null };
let taskRunnerRecreate = () => { taskRunnerDestroy(); taskRunnerCreate(); };
let taskRunnerAction = (action) => {
    switch (action.toLowerCase()) {
        case 'resume':
        case 'start':
            taskRunnerRecreate();
            break;
        case 'stop':
        case 'pause':
            taskRunnerDestroy();
            break;
        default:
        case 'toggle':
            taskRunnerToggle();
    }
}
taskRunnerAction('start');

let secondsElapsed = 0;

function countDown() {
    if(__state.status===statusIs.PAUSED) return;
    secondsElapsed += 1;
    console.log("count", secondsElapsed);
}
/* */





NEW LOGIC : https://stackoverflow.com/a/3969760/849829


